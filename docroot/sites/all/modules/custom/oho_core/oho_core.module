<?php
/**
 * @file oho_core.module
 * Core module for OHO
 */

/**
 * Implements hook_init()
 */
function oho_core_init() {
  global $_oho_core;
  
  // Build the domains array
  if (module_exists('domain') && db_table_exists('domain')) {
    $_oho_core['domains'] = array();
    
    $sql =
      'SELECT * '.
      'FROM {domain} '.
      'WHERE `valid` = :valid '.
      'ORDER BY `valid` DESC, `domain_id` ASC;';
    $results = db_query($sql, array(':valid' => 1));
    
    foreach ($results as $row) {
      $key = 'domain'.$row->domain_id.'-href';
      
      $_oho_core['domains'][$key] = $row;
      $_oho_core['domains'][$key]->href = $row->scheme.'://'.$row->subdomain.'/';
    }
  }
  
  // Get the sources settings variable
  $_oho_core['domain_source_settings'] = variable_get('oho_domain_source_settings', '');
}

/**
 * Implements hook_menu()
 */
function oho_core_menu() {
  $items = array();
  
  $items['oho-mp3-download/%/%'] = array(
    'title' => 'download',
    'title callback' => 'oho_mp3_title_response',
    'title arguments' => array(1,2),
    'page callback' => 'oho_mp3_download',
    'page arguments' => array(1,2),
    'file' => 'includes/oho_core.mp3dl.inc',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );
  
  if (module_exists('domain')) {
    $items['admin/structure/domain/extra-domain-source-settings'] = array(
      'title' => 'Extra Domain Source Settings',
      'access arguments' => array('administer domains'),
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('oho_domain_content_settings'),
      'file' => 'includes/oho_core.admin.inc',
      'description' => 'Configure special content domain source settings.',
      'weight' => -3,
    );
  }
  
  return $items;
}

/**
 * Implements hook_block_view_alter().
 */
function oho_core_block_view_alter(&$data, $block) {
  //Borrowed from Open Public
  //We want to remove the subject for node blocks that have show title turned off
  if(module_exists('nodeblock') && $block->module == 'nodeblock') {
    $node = $data['content']['#node'];
    if ((isset($node->language))
    && isset($node->field_nb_show_title[$node->language][0]['value'])
    && !$node->field_nb_show_title[$node->language][0]['value']) {
      $data['subject'] = '';
    }
  }
}

// defaulting holiday and historical event type to all day
// doing this to preserve sort order on event listing -- holiday then event
// only affects form for creating new holiday type 
function oho_core_date_combo_process_alter(&$element, &$form_state, $context) {
  if ($element['#entity']->type == 'holiday' && empty($element['#entity']->title)) {
    $element['all_day']['#default_value'] = TRUE;
  }
}

/**
 * Implements hook_token_info()
 */
function oho_core_token_info() {
  global $_oho_core;
  
  $info['types']['oho'] = array(
    'name' => t('OHO Tokens'),
    'description' => t('Custom OHO tokens for domain paths.'),
    'needs-data' => 'oho',
  );
  
  if (!empty($_oho_core['domains'])) {
    foreach ($_oho_core['domains'] as $domain_key => $domain) {
      $info['tokens']['oho'][$domain_key] = array(
        'name' => t('Path for !sitename', array('!sitename' => $domain->sitename)),
        'description' => t('The path: !href', array('!href' => $domain->href)),
        'type' => 'oho',
      );
    }
  }
  
  return $info;
}

/**
 * Implements hook_tokens()
 */
function oho_core_tokens($type, $tokens, array $data = array(), array $options = array()) {
  global $_oho_core;
  
  $domains = !empty($_oho_core['domains']) ? $_oho_core['domains'] : array();
  
  $replacements = array();
  
  if ($type == 'oho') {
    foreach ($tokens as $name => $original) {
      if (!empty($domains[$name])) {
        $d = $domains[$name];
        
        $replacements[$original] = $d->href;
      }
    }
  }
  
  return $replacements;
}

/**
 * Implements hook_form_alter()
 */
function oho_core_form_alter(&$form, &$form_state, $form_id) {
  $tokens = array(
    '#theme' => 'token_tree',
    '#token_types' => array('oho'),
  );
  
  switch ($form_id) {
    case 'block_admin_configure': {
      if (!empty($form['settings']['body_field'])) {
        $form['settings']['body_field']['tokens'] = $tokens;
      }
      break;
    }
    case 'menu_edit_item': {
      break;
    }
    case 'views_ui_config_item_form': {
      break;
    }
    case 'eck__entity__form_edit_public_safety_log_public_safety_log': {
     $form['title']['#title'] = 'Crime/Fire Log Description'; 
     break;
    }
  }
}

/**
 * Implements hook_clone_node_alter()
 */
function oho_core_clone_node_alter(&$node, $context) {
  /*dpm($node);
  dpm($context);*/
  
  if (db_table_exists('field_collection_item')) {
    $sql =
      'SELECT DISTINCT `field_name` '.
      'FROM {field_collection_item} '.
      'ORDER BY `field_name`;';
    $results = db_query($sql);
    
    foreach ($results as $row) {
      $field_name = $row->field_name;
      
      if (isset($node->{$field_name}[$node->language])) {
        oho_core_clone_fc_items('node', $node, $field_name);
      }
    }
  }
}

/**
 * Implements template_preprocess_page()
 */
function oho_core_preprocess_page(&$vars) {

  global $_oho_core, $_domain;
  $dss = !empty($_oho_core['domain_source_settings']) ? $_oho_core['domain_source_settings'] : '';
  
  if (empty($dss) || empty($_domain['domain_id']) || !function_exists('domain_lookup') || !function_exists('domain_goto')) return;
  
  $domain_id = $sd_id = $_domain['domain_id'];
  
  // Views
  if (function_exists('views_get_page_view') && $page_view = views_get_page_view() && !empty($dss['views'])) {
    $pv = views_get_page_view();
    $name = !empty($pv->name) ? $pv->name : 0;
    
    if (!empty($name) && !empty($dss['views'][$name])) {
      $sd_id = $dss['views'][$name];
    }
  // Taxonomy
  } elseif (arg(0) == 'taxonomy' && arg(1) == 'term' && !empty($dss['vocabularies'])) {
    $tid = arg(2);
    $tid_check = is_numeric($tid);
    
    if (!empty($tid) && is_numeric($tid)) {
      $sql =
        'SELECT `vid` '.
        'FROM {taxonomy_term_data} '.
        'WHERE `tid` = :tid '.
        'ORDER BY `tid` LIMIT 1;';
      $result = db_query($sql, array(':tid' => $tid))->fetchField();
      $vid = !empty($result) ? $result : 0;
      
      if (!empty($vid) && !empty($dss['vocabularies'][$vid])) {
        $sd_id = $dss['vocabularies'][$vid];
      }
    }
  }
  
  if (!empty($sd_id) && is_numeric($sd_id) && $sd_id != $domain_id) {
    $domain = domain_lookup($sd_id);
    
    if (!empty($domain['domain_id']) && !empty($domain['subdomain'])) {
      domain_goto($domain);
    }
  }

}

/**
 * Implements template_preprocess_block()
 */
function oho_core_preprocess_block(&$vars) {
  $q = !empty($_GET['q']) ? $_GET['q'] : '';
  
  if (strpos($q, 'admin/') !== FALSE && strpos($q, 'block/') !== FALSE && strpos($q, '/configure') !== FALSE) {
    return;
  }
  
  $content = $vars['content'];
  $vars['content'] = token_replace($content);
}

/**
 * Taken from http://drupal.org/node/1233256#comment-5167316
 */
function oho_core_clone_fc_items($entity_type, &$entity, $fc_field, $language = LANGUAGE_NONE){
  $entity_wrapper = entity_metadata_wrapper($entity_type, $entity);
  $old_fc_items = $entity_wrapper->{$fc_field}->value();
  
  if (!is_array($old_fc_items)) {
    $old_fc_items = array($old_fc_items);
  }

  $field_info_instances = field_info_instances();
  $field_names = element_children($field_info_instances['field_collection_item'][$fc_field]);

  unset($entity->{$fc_field}[$language]);

  foreach ($old_fc_items as $old_fc_item) {
    $old_fc_item_wrapper = entity_metadata_wrapper('field_collection_item', $old_fc_item);
    $new_fc_item = entity_create('field_collection_item', array('field_name' => $fc_field));
    $new_fc_item->setHostEntity($entity_type, $entity);
    $new_fc_item_wrapper = entity_metadata_wrapper('field_collection_item', $new_fc_item);
    
    foreach ($field_names as $field_name) {
      if (!empty($old_fc_item->{$field_name})){
        $new_fc_item->{$field_name} = $old_fc_item->{$field_name};
      }
    }
    
    $new_fc_item_wrapper->save();
    
    //Now check if any of the fields in the newly cloned fc item is a field collection and recursively call this function to properly clone it.
    foreach ($field_names as $field_name) {
      if (!empty($new_fc_item->{$field_name})){
        $field_info = field_info_field($field_name);
        
        if ($field_info['type'] == 'field_collection'){
            //clone_fc_items('field_collection_item',$new_fc_item, $field_name,$language);
        }     
      }
    }
  }
}
